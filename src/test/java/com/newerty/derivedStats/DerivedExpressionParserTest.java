package com.newerty.derivedStats;import com.newerty.derivedStats.DerivedExpressionEvaluator;import com.newerty.derivedStats.ExpressionStatId;import com.newerty.derivedStats.ExpressionStatIdBuilder;import com.newerty.derivedStats.ExpressionStatIdList;import org.junit.Test;import static org.junit.Assert.assertEquals;import java.util.ArrayList;import java.util.List;import static org.junit.Assert.assertTrue;public class DerivedExpressionParserTest {    private final static String DUMMY_CATEGORY = "dummy";    @Test    // extract derived and dependent statIds from expression    public void extractStatIds() {        String testExpr = "catA.weapon_accuracy{map:\"deathstar\",weapon:\"blaster\"} = catB.kills{map:\"deathstar\",weapon:\"blaster\"} / catC.shots{map:\"deathstar\",weapon:\"blaster\"}";        DerivedExpressionEvaluator evaluator = DerivedExpressionEvaluator.build(testExpr, DUMMY_CATEGORY);        ExpressionStatIdList statIds = evaluator.getStatIds();        // derived statId        ExpressionStatId weapon_accuracy = new ExpressionStatIdBuilder()                .setStatId("weapon_accuracy")                .setCategoryId("catA")                .addDimension("map", "deathstar")                .addDimension("weapon", "blaster")                .build();        assertEquals(weapon_accuracy, statIds.derivedStatId);        // dependent ids        assertEquals(2, statIds.dependentStatIds.size());        ExpressionStatId kills = new ExpressionStatIdBuilder()                .setStatId("kills")                .setCategoryId("catB")                .addDimension("map", "deathstar")                .addDimension("weapon", "blaster")                .build();        ExpressionStatId shots = new ExpressionStatIdBuilder()                .setStatId("shots")                .setCategoryId("catC")                .addDimension("map", "deathstar")                .addDimension("weapon", "blaster")                .build();        List<ExpressionStatId> dependentStatIds = new ArrayList<>();        dependentStatIds.add(kills);        dependentStatIds.add(shots);        assertTrue(dependentStatIds.containsAll(statIds.dependentStatIds) &&                statIds.dependentStatIds.containsAll(dependentStatIds));    }    @Test    // extract dependent statIds from a simple aggregate function    public void extractStatIdSimpleAggregate() {        String testExpr = "kills = SUM(kills_rifle,kills_blaster,kills_lasersword)";        DerivedExpressionEvaluator evaluator = DerivedExpressionEvaluator.build(testExpr, DUMMY_CATEGORY);        ExpressionStatIdList statIds = evaluator.getStatIds();        // dependent ids        assertEquals(3, statIds.dependentStatIds.size());        ExpressionStatId kills_rifle = new ExpressionStatIdBuilder()                .setStatId("kills_rifle")                .setCategoryId(DUMMY_CATEGORY)                .build();        ExpressionStatId kills_blaster = new ExpressionStatIdBuilder()                .setStatId("kills_blaster")                .setCategoryId(DUMMY_CATEGORY)                .build();        ExpressionStatId kills_lasersword = new ExpressionStatIdBuilder()                .setStatId("kills_lasersword")                .setCategoryId(DUMMY_CATEGORY)                .build();        List<ExpressionStatId> dependentStatIds = new ArrayList<>();        dependentStatIds.add(kills_rifle);        dependentStatIds.add(kills_blaster);        dependentStatIds.add(kills_lasersword);        assertTrue(dependentStatIds.containsAll(statIds.dependentStatIds));        assertTrue(statIds.dependentStatIds.containsAll(dependentStatIds));    }}